{-# START_FILE package.yaml #-}
name:                {{name}}
version:             0.0.1.0
github:              "githubuser/{{name}}"
license:             BSD3
author:              "Author name here"
maintainer:          "example@example.com"
copyright:           "2020 Author name here"

extra-source-files:
- README.md
- ChangeLog.md

# Metadata used when publishing your package
# synopsis:            Short description of your package
# category:            Web

# To avoid duplicated efforts in documentation and dealing with the
# complications of embedding Haddock markup inside cabal files, it is
# common to point users to the README.md file.
description:         Please see the README on GitHub at <https://github.com/githubuser/{{name}}#readme>

ghc-options:
- -Wall
- -fno-warn-unused-do-bind
- -fno-warn-name-shadowing
- -fno-warn-orphans
- -Wcompat
- -Wincomplete-record-updates
- -Wincomplete-uni-patterns
- -Wredundant-constraints

default-extensions:
- BangPatterns
- BinaryLiterals
- ConstraintKinds
- DataKinds
- DefaultSignatures
- DeriveDataTypeable
- DeriveFoldable
- DeriveFunctor
- DeriveGeneric
- DeriveTraversable
- DoAndIfThenElse
- EmptyDataDecls
- ExistentialQuantification
- FlexibleContexts
- FlexibleInstances
- FunctionalDependencies
- GADTs
- GeneralizedNewtypeDeriving
- InstanceSigs
- KindSignatures
- LambdaCase
- MultiParamTypeClasses
- MultiWayIf
- NamedFieldPuns
- OverloadedLabels
- PartialTypeSignatures
- PatternGuards
- PolyKinds
- RankNTypes
- RecordWildCards
- ScopedTypeVariables
- StandaloneDeriving
- TupleSections
- TypeFamilies
- TypeOperators
- TypeSynonymInstances
- ViewPatterns

dependencies:
- base >= 4.7 && < 5
- safe-exceptions
- optparse-applicative
- lens
- data-default
- aeson
- yaml
- conduit
- bytestring
- text
- hslogger
- mtl
- monad-control
- lifted-base
- transformers-base

library:
  source-dirs: src
  # exposed-modules:
  # - {{name-as-module}}.Control

executables:
  {{name}}:
    main:                Main.hs
    source-dirs:         app
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - {{name}}

tests:
  {{name}}-test:
    main:                Spec.hs
    source-dirs:         test
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - {{name}}
    - hspec


{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain


{-# START_FILE app/Main.hs #-}
module Main where

import System.Exit
import Options.Applicative
import qualified Control.Exception.Safe as E
import Paths_{{name-as-varid}} (version)
import Data.Version (showVersion)

import {{name-as-module}}.Control

-- |
--
main :: IO ()
main = getArgs >>= \args -> do
       flip E.catchAny exception
     $ flip E.finally  finalize
     $ run args

  where
    finalize = do
      return ()

    exception e = do
      putStrLn "-----------------------------------------------------------------------------"
      putStrLn "ERROR exit."
      print e
      putStrLn "-----------------------------------------------------------------------------"
      exitFailure

-------------------------------------------------------------------------------
-- |
--   optparse-applicative
--
getArgs :: IO ArgData
getArgs = execParser parseInfo

-- |
--
parseInfo :: ParserInfo ArgData
parseInfo = info (helper <*> verOpt <*> options) $ mconcat
  [ fullDesc
  , header   "This is app program."
  , footer   "Copyright 2020. All Rights Reserved."
  , progDesc "This is app program description."
  ]

-- |
--
verOpt :: Parser (a -> a)
verOpt = infoOption msg $ mconcat
  [ short 'v'
  , long  "version"
  , help  "Show version"
  ]
  where
    msg = "app-" ++ showVersion version


-- |
--
options :: Parser ArgData
options = (<*>) helper
  $ ArgData
  <$> confOption

-- |
--
confOption :: Parser (Maybe FilePath)
confOption = optional $ strOption $ mconcat
  [ short 'y', long "yaml"
  , help "config file"
  , metavar "FILE"
  ]



{-# START_FILE src/{{name-as-module}}/Application.hs #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE OverloadedStrings #-}

module {{name-as-module}}.Application (
    app
  ) where

import Control.Monad.Reader
import qualified System.Log.Logger as L

import {{name-as-module}}.Type
import {{name-as-module}}.Constant
import qualified {{name-as-module}}.Utility as U


-- |
--
app :: AppContext ()
app = do
  U.liftIOE $ print ("app called." :: String)

  lv <- _logLevelAppData <$> ask
  U.liftIOE $ L.debugM   _LOG_APP "This is a debug log message"
  U.liftIOE $ L.infoM    _LOG_APP "This is a info log message"
  U.liftIOE $ L.warningM _LOG_APP "This is a warn log message"
  U.liftIOE $ L.errorM   _LOG_APP $ "This is a error log message. " ++ show lv

  return ()


{-# START_FILE src/{{name-as-module}}/Constant.hs #-}
module {{name-as-module}}.Constant where

--------------------------------------------------------------------------------
-- |
--
_LOG_APP :: String
_LOG_APP = "APP"

-- |
--
_LOG_FORMAT :: String
_LOG_FORMAT = "$time [$pid($tid)] $prio $loggername - $msg"

-- |
--
_LOG_FORMAT_DATE :: String
_LOG_FORMAT_DATE = "%Y-%m-%d %H:%M:%S.%q"


{-# START_FILE src/{{name-as-module}}/Control.hs #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE OverloadedStrings #-}

module {{name-as-module}}.Control (
    ArgData(..)
  , run
  ) where

import qualified Control.Exception.Safe as E
import Data.Default
import Data.Yaml
import Control.Lens

import {{name-as-module}}.Type
import qualified {{name-as-module}}.Utility as U
import qualified {{name-as-module}}.Application as A

-- |
--
run :: ArgData -> IO ()
run args = do

  conf <- maybe (pure def) decodeFileThrow (args^.yamlArgData)

  U.setupLogger (conf^.logLevelConfigData) (conf^.logFileConfigData)

  let appDat = AppData {
      _logLevelAppData = conf^.logLevelConfigData
    }

  U.runApp appDat A.app >>= \case
    Right _ -> return ()
    Left er -> E.throwString er



{-# START_FILE src/{{name-as-module}}/Type.hs #-}
{-# LANGUAGE TemplateHaskell #-}

module {{name-as-module}}.Type where

import Data.Data
import Data.Default
import Control.Lens
import Data.Aeson
import Data.Aeson.TH
import Control.Monad.Reader
import Control.Monad.Except
import qualified System.Log.Logger as L
import qualified Data.Text as T
import qualified Text.Read as R

--------------------------------------------------------------------------------
-- |
--
instance FromJSON L.Priority where
  parseJSON (String v) = case R.readEither (T.unpack v) of
    Right l -> pure l
    Left er -> error $ "invalid loglevel. <" ++ T.unpack v ++ "> " ++ er
  parseJSON o = error $ "json parse error. Priority:" ++ show o

instance ToJSON L.Priority where
  toJSON (L.DEBUG)     = String $ T.pack "DEBUG"
  toJSON (L.INFO)      = String $ T.pack "INFO"
  toJSON (L.NOTICE)    = String $ T.pack "NOTICE"
  toJSON (L.WARNING)   = String $ T.pack "WARNING"
  toJSON (L.ERROR)     = String $ T.pack "ERROR"
  toJSON (L.CRITICAL)  = String $ T.pack "CRITICAL"
  toJSON (L.ALERT)     = String $ T.pack "ALERT"
  toJSON (L.EMERGENCY) = String $ T.pack "EMERGENCY"


--------------------------------------------------------------------------------
-- |
--
data ArgData = ArgData {
    _yamlArgData :: Maybe FilePath
  } deriving (Data, Typeable, Show, Read, Eq)

makeLenses ''ArgData
$(deriveJSON
  defaultOptions {
      fieldLabelModifier = tail . reverse . drop (length "ArgData") . reverse
    }
  ''ArgData)

instance Default ArgData where
  def = ArgData {
        _yamlArgData = Nothing
      }


--------------------------------------------------------------------------------
-- |
--
data ConfigData = ConfigData {
    _logFileConfigData  :: FilePath
  , _logLevelConfigData :: L.Priority
  } deriving (Typeable, Show, Read, Eq)

makeLenses ''ConfigData
$(deriveJSON
  defaultOptions {
      fieldLabelModifier = tail . reverse . drop (length "ConfigData") . reverse
    }
  ''ConfigData)

instance Default ConfigData where
  def = ConfigData {
        _logFileConfigData  = "{{name}}.log"
      , _logLevelConfigData = L.WARNING
      }


--------------------------------------------------------------------------------
-- |
--
data AppData = AppData {
    _logLevelAppData :: L.Priority
  }

makeLenses ''AppData

instance Default AppData where
  def = AppData {
        _logLevelAppData = L.WARNING
      }

--------------------------------------------------------------------------------
-- |
--
type ErrorData = String
type AppContext = ReaderT AppData (ExceptT ErrorData IO)



{-# START_FILE src/{{name-as-module}}/Utility.hs #-}
{-# LANGUAGE OverloadedStrings #-}

module {{name-as-module}}.Utility where

import qualified Control.Exception.Safe as E
import Control.Monad.IO.Class
import Control.Monad.Except
import Control.Monad.Reader
import qualified System.Log.Logger as L
import qualified System.Log.Formatter as L
import qualified System.Log.Handler as LH
import qualified System.Log.Handler.Simple as LHS
import System.IO

import {{name-as-module}}.Type
import {{name-as-module}}.Constant


-- |
--
runApp :: AppData -> AppContext a -> IO (Either ErrorData a)
runApp appDat app =
   runExceptT
    $ runReaderT app appDat


-- |
--
liftIOE :: IO a -> AppContext a
liftIOE f = liftIO (go f) >>= liftEither
  where
    go :: IO b -> IO (Either String b)
    go f = E.catchAny (Right <$> f) errHdl

    errHdl :: E.SomeException -> IO (Either String a)
    errHdl = return . Left . show


-- |
--
setupLogger :: L.Priority -> FilePath -> IO ()
setupLogger lv path = do

  logStream <- openFile path AppendMode
  hSetEncoding logStream utf8

  logH <- LHS.streamHandler logStream lv

  let logHandle  = logH {LHS.closeFunc = hClose}
      logFormat  = L.tfLogFormatter _LOG_FORMAT_DATE _LOG_FORMAT
      logHandler = LH.setFormatter logHandle logFormat

  L.updateGlobalLogger L.rootLoggerName $ L.setHandlers ([] :: [LHS.GenericHandler Handle])
  L.updateGlobalLogger _LOG_APP $ L.setHandlers [logHandler]
  L.updateGlobalLogger _LOG_APP $ L.setLevel lv




{-# START_FILE test/Spec.hs #-}
{-# OPTIONS_GHC -F -pgmF hspec-discover #-}

{-# START_FILE test/{{name-as-module}}/UtilitySpec.hs #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE OverloadedStrings #-}

module {{name-as-module}}.UtilitySpec (spec) where

import Test.Hspec
import Data.Default
import qualified System.Log.Logger as L

import Spec.{{name-as-module}}.Constant
import {{name-as-module}}.Type
import qualified {{name-as-module}}.Utility as U


-- |
--
spec :: Spec
spec = do
  runIO $ putStrLn "Start Spec."
  beforeAll_ setUpOnce
    . afterAll_ tearDownOnce
    . before_ setUp
    . after_  tearDown
    $ run

  where
    setUpOnce :: IO ()
    setUpOnce = do
      putStrLn "[INFO] すべての試験開始前に1回だけ実施"

    tearDownOnce ::IO ()
    tearDownOnce = do
      putStrLn "[INFO] すべての試験終了後に1回だけ実施"

    setUp :: IO ()
    setUp = do
      putStrLn "[INFO] 各試験の開始前に実施"

    tearDown :: IO ()
    tearDown = do
      putStrLn "[INFO] 各試験の終了後に実施"

-- |
--
run :: Spec
run = do
  describe "runApp" $ do
    context "when AppData default" $ do
      it "should be 10" $ do
        putStrLn "[INFO] 1件目の試験を実施"
        let expect = 10

        (Right actual) <- U.runApp def app10

        expect `shouldBe` actual

      it "should exception catched" $ do
        putStrLn "[INFO] 2件目の試験を実施"

        (Left actual) <- U.runApp def appLeft

        actual `shouldSatisfy` (not . null)
        U.runApp def appLeft `shouldReturn` Left "Prelude.head: empty list"

      it "should exception throwed" $ do
        putStrLn "[INFO] 3件目の試験を実施"

        appException `shouldThrow` anyException
        appException `shouldThrow` errorCall "Prelude.head: empty list"



-- |
--
app10 :: AppContext Int
app10 = do
  U.liftIOE $ print ("app called." :: String)
  U.liftIOE $ L.debugM  _LOG_SPEC "This is a debug log message"
  return 10


-- |
--
appLeft :: AppContext ()
appLeft = do
  U.liftIOE $ print $ head ""
  return ()


-- |
--
appException :: IO ()
appException = print $ head ""



{-# START_FILE test/Spec/{{name-as-module}}/Constant.hs #-}
module Spec.{{name-as-module}}.Constant where

--------------------------------------------------------------------------------
-- |
--
_LOG_SPEC :: String
_LOG_SPEC = "SPEC"




{-# START_FILE ./LICENSE #-}
Copyright Author name here (c) 2020

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of Author name here nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


{-# START_FILE ./README.md #-}
# {{name}}


{-# START_FILE ./ChangeLog.md #-}
# Changelog for {{name}}

## Unreleased changes


